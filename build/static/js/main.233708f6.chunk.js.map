{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","App","useSelector","useState","useDispatch","useEffect","className","src","width","alt","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8+ngBAAMA,EAAe,CACnBC,SAAS,EACTC,QAAS,KACTC,cAAe,KACfC,KAAM,KACNC,SAAU,IAkCGC,EA/BW,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCAC1D,OAAQA,EAAOC,MACb,IAAK,qBACH,OAAO,2BACFT,GADL,IAEEC,SAAS,IAEb,IAAK,qBACH,OAAO,2BACFM,GADL,IAEEN,SAAS,EACTC,QAASM,EAAOE,QAAQR,QACxBC,cAAeK,EAAOE,QAAQP,cAC9BC,KAAMI,EAAOE,QAAQN,OAEzB,IAAK,oBACH,OAAO,2BACFJ,GADL,IAEEC,SAAS,EACTI,SAAUG,EAAOE,UAErB,IAAK,iBACH,OAAO,2BACFH,GADL,IAEEL,QAASM,EAAOE,QAAQR,UAE5B,QACE,OAAOK,ICnCPP,EAAe,CACnBC,SAAS,EACTU,KAAM,GACNC,OAAO,EACPP,SAAU,IA4BGQ,EAzBK,WAAmC,IAAlCN,EAAiC,uDAAzBP,EAAcQ,EAAW,uCACpD,OAAQA,EAAOC,MACb,IAAK,qBACH,OAAO,2BACFT,GADL,IAEEC,SAAS,IAEb,IAAK,qBACH,OAAO,2BACFD,GADL,IAEEC,SAAS,EACTU,KAAMH,EAAOE,QAAQC,OAEzB,IAAK,oBACH,OAAO,2BACFX,GADL,IAEEC,SAAS,EACTW,OAAO,EACPP,SAAUG,EAAOE,UAErB,QACE,OAAOH,ICvBPO,EAAcC,YAAgB,CAClCC,WAAYV,EACZW,KAAMJ,IAGFK,EAAa,CAACC,KACdC,EAAmBC,YAAQC,IAAe,WAAf,EAAmBJ,IAQrCK,EALNC,YAAYV,EAAaM,GCE5BK,EAAkB,SAACf,GACvB,MAAO,CACLD,KAAM,oBACNC,YAISgB,EAAY,SAACxB,GACxB,8CAAO,WAAOyB,GAAP,eAAAC,EAAA,6DACLD,EArBK,CACLlB,KAAM,uBAmBD,kBAGcc,EACdM,WACAb,WAAWb,cAAc2B,QAAQnB,OACjCoB,OANA,OAGCpB,EAHD,OAQHgB,EAtBG,CACLlB,KAAM,qBACNC,QAqBqB,CACfC,UAVD,gDAcHqB,QAAQC,IAAR,MACAN,EAASF,EAAgB,uCAftB,yDAAP,uD,QCkIaS,MArJf,WACE,IAAMlB,EAAamB,aAAY,SAAC5B,GAAD,OAAWA,EAAMS,cAEhD,EAA8BoB,oBAAS,GAAvC,mBACA,GADA,UAC4BA,mBAAS,KAArC,mBACMT,GADN,UACiBU,eAyCjB,OANAC,qBAAU,WACJtB,EAAWd,SACbyB,EAASD,EAAUV,EAAWd,YAE/B,CAACc,EAAYW,IAGd,+BACE,mCACE,qBAAKY,UAAU,sBAAf,SACE,qBAAKC,IAAI,kCAAkCC,MAAM,MAAMC,IAAI,WAE7D,8BACE,qBAAIH,UAAU,iBAAd,UACE,oBAAIA,UAAU,OAAd,SACE,mBAAGI,KAAK,QAAR,oBAEF,6BACE,mBAAGA,KAAK,QAAR,oBAEF,6BACE,mBAAGA,KAAK,UAAR,sBAEF,6BACE,mBAAGA,KAAK,YAAR,mCCzDCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,CAAU/B,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFgC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.233708f6.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        name: action.payload.name,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\n\nfunction App() {\n  const blockchain = useSelector((state) => state.blockchain);\n  // const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const mint = async () => {\n    setStatus(\"Minting in progress\");\n    setLoading(true);\n    // Need to call /api/verify-whitelist to get the whitelist signature\n    // post body: { body: { address: blockchain.account } }\n    // Set loader\n    // error handling needed\n    // once the response status is 200, include the signature data in mint()\n    // const listingPrice = \"0.01\";\n    const listingPrice = await blockchain.smartContract.methods\n      .listingPrice()\n      .call();\n    blockchain.smartContract.methods\n      .mint(blockchain.account)\n      .send({\n        from: blockchain.account,\n        // Todo: remove gasLimit for prod\n        gasLimit: \"285000\",\n        value: listingPrice,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(err.messsage);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setLoading(false);\n        dispatch(fetchData(blockchain.account));\n        setStatus(\"Successfully minted your NFT\");\n      });\n  };\n\n  useEffect(() => {\n    if (blockchain.account) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain, dispatch]);\n\n  return (\n    <main>\n      <header>\n        <div className=\"flex content-center\">\n          <img src=\"https://via.placeholder.com/150\" width=\"200\" alt=\"logo\" />\n        </div>\n        <nav>\n          <ul className=\"flex list-none\">\n            <li className=\"mr-4\">\n              <a href=\"/info\">info</a>\n            </li>\n            <li>\n              <a href=\"/team\">Team</a>\n            </li>\n            <li>\n              <a href=\"/artist\">Artist</a>\n            </li>\n            <li>\n              <a href=\"/partners\">Partners</a>\n            </li>\n          </ul>\n        </nav>\n      </header>\n    </main>\n    // <Container>\n    //   <div className=\"flex justify-content-center\">\n    //     <img src=\"https://via.placeholder.com/150\" width=\"200\" alt=\"logo\"></img>\n    //   </div>\n\n    //   <Row>\n    //     <Col xs={12}>\n    //       <Nav\n    //         activeKey=\"/home\"\n    //         onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\n    //       >\n    //         <Nav.Item>\n    //           <Nav.Link href=\"/info\">Info</Nav.Link>\n    //         </Nav.Item>\n    //         <Nav.Item>\n    //           <Nav.Link eventKey=\"/team\">Team</Nav.Link>\n    //         </Nav.Item>\n    //         <Nav.Item>\n    //           <Nav.Link eventKey=\"/artist\">Artist</Nav.Link>\n    //         </Nav.Item>\n    //         <Nav.Item>\n    //           <Nav.Link eventKey=\"/partners\">Partners</Nav.Link>\n    //         </Nav.Item>\n    //       </Nav>\n    //     </Col>\n    //   </Row>\n    //   <Row>\n    //     <Col xs={12} className=\"flex justify-content-between\">\n    //       <img\n    //         src=\"https://via.placeholder.com/150\"\n    //         width=\"500\"\n    //         alt=\"logo\"\n    //       ></img>\n    //     </Col>\n    //   </Row>\n    //   {!blockchain.account && (\n    //     <Row className=\"text-center\">\n    //       <Col>\n    //         <h1>Connect to Metamask</h1>\n    //         <Button\n    //           onClick={(e) => {\n    //             e.preventDefault();\n    //             dispatch(connect());\n    //           }}\n    //         >\n    //           Connect\n    //         </Button>\n    //         {blockchain.errorMsg && <p>{blockchain.errorMsg}</p>}\n    //       </Col>\n    //     </Row>\n    //   )}\n    //   {blockchain.account && (\n    //     <Row className=\"text-center pt-5 pb-5\">\n    //       <Col>\n    //         <h1>Welcome to Beyond Boundary Collection</h1>\n    //         {loading && <p>loading...</p>}\n    //         {status && <p>{status}</p>}\n    //         <Button\n    //           onClick={(e) => {\n    //             e.preventDefault();\n    //             mint();\n    //           }}\n    //         >\n    //           Mint\n    //         </Button>\n    //       </Col>\n    //     </Row>\n    //   )}\n    //   <Row className=\"pt-5 pb-5\">\n    //     <Col>\n    //       <h2 className=\"text-center\">Frequently Asked Questions</h2>\n    //     </Col>\n    //   </Row>\n    //   <Row>{/* parallax section */}</Row>\n    //   <Row>{/* footer section */}</Row>\n    // </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}